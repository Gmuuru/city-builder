/// <reference path="../node_modules/angular2/ts/typings/node/node.d.ts"/>
/// <reference path="../node_modules/angular2/typings/browser.d.ts"/>
import { bootstrap } from "angular2/platform/browser";
import { Component } from "angular2/core";
import {Injectable} from 'angular2/core';

import {Parser} from "./ts/classes/Parser";
import {ProgressiveLoader} from "./ts/classes/ProgressiveLoader";
import {Renderer} from "./ts/classes/Renderer";
import {Line} from "./ts/components/Line";
import {LineComponent} from "./ts/components/Line";

//############################ APP #########################################

@Component(
{
	selector: 'reader',
	template: `
	
    <!-- Menu Bar -->
    <nav class="navbar navbar-inverse">
      <div class="container-fluid">
        <div class="navbar-header">
          <a style="color:#DDDDDD" href="#" class="navbar-brand">Angular2 testing</a>
        </div>
        <div>
          <ul class="nav navbar-nav">
            <li>
				<a href="javascript:void(0)" onclick="$('#upload').click()">Open</a>
				<form>
					<input id="upload" type="file" name=test style="visibility:hidden;position:absolute;top:0;left:0;width:0px" (change)="fileChangeEvent($event)">
				</form>
			
			</li>
            <li><a href="javascript:void(0)" (click)="newMap()">New</a></li>
          </ul>
        </div>
      </div>
    </nav>
	<div class='map-container'>
		<div class='map'>
			<line-block *ngFor="#line of lines" [line]="line"></line-block>
		</div>
	</div>
	<build-menu></build-menu>
	`,
	directives: [LineComponent],
	providers: [MissionService]
}
)
class mainApp {
	
	lines : Line[];
	storage : Line[];
	width : number;
	height : number;
	file : File;
	contentText : string;
	
	constructor(private missionService: MissionService){
		this.lines = [];
		this.storage = [];
		this.width = 0;
		this.height = 0;
		this.file = null;
	}
	
	newMap() : void{
		this.lines = [];
		this.storage = [];
		this.width=60;
		this.height=60;
		for(var i = 0; i < this.height; i++){
			var line:Line = new Line(i, this.width);
			line.complete();
			this.storage.push(line);
		}
		this.progressiveLoad();
		
	}
	// file reading
	fileChangeEvent(fileInput: any){
        this.file = (<File[]> fileInput.target.files)[0];
		this.render();
    }
	
	render(): void {
		this.lines = [];
		this.storage = [];
		this.read();
	}
	
	read(): void {
		var reader : FileReader = new FileReader();
		reader.onload  = (e) => {
			this.storage = Parser.parse(reader.result);
			//this.storage = this.renderer.render(this.storage);
			this.progressiveLoad();
		};
		reader.readAsText(this.file);
	}
	
	progressiveLoad() : void {
		var pl = new ProgressiveLoader();
		pl.load(this.storage, this.lines);
		//this.renderer.reload(this.lines);
	}
	
	loadLine(line : Line) : void {
		this.lines.push(line);
		console.log(`ligne ${line.index} charg√©e`);
	}
}

@Injectable()
export class MissionService {
	test : number;
	
	load() : void {
		this.test = 1;
	}
}

bootstrap(mainApp);